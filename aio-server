# aio-server
# Dynamic DNS Server
#   Login to Web server
#   Never expire cookies
#   Add your fixed DNS like a normal DNS service
#   Add your dynamic domains per cookie session
#   Add an existing bucket of domains to the cookie session or start a new one
#   Set all the domains of the cookie session to the remote_address
# SMTP server
#   Private
#     Silently ignore all SMTP traffic, but log their connection
#     Auto-whitelist mode that allows any connection to be whitelisted (aw can manually toggle or timeout)
#     Peruse list of connections and choose to wl
#   Public
#     For only emails with domains in the DNS server, proxy the email via Sendgrid
#     Optional wildcard redirect * to a single email
#     Redirect listed emails to those mapped
# Web Server
#   Static file server
#   Ability to upload static files to your domain via dropzone
#   Enable Markdown
#   Enable Mojo templates only in dedicated (non-shared) environments
# Included apps (per domain)
#   IRC
#   PasteBin / Gist (share with encryption option)
#   TinyURL
#   DropZone / File.Pizza
#   ToDo / Notes
#   Blog


use Mojolicious::Lite;
use Mojo::IOLoop;
use Mojo::IOLoop::ForkCall;
use IO::Socket;
use Net::DNS::Packet;
use Mojo::Util qw(slurp spurt);

my $db = {};
my $w = {};
my $awl;
my $dns = {};
my @children;

sub dns {
  my $ppid = shift;
  my ($sock, $buf, $MAXLEN, $PORTNO);
  $MAXLEN = 1024;
  $PORTNO = 53;
  $sock = IO::Socket::INET->new(LocalAddr => '127.0.0.1', LocalPort => $PORTNO, Proto => 'udp')
    or die "socket: $@";
  print "Awaiting UDP messages on port $PORTNO\n";
  while ( $sock->recv($buf, $MAXLEN) ) {
    warn "PPID: $ppid";
    last unless kill 'ZERO', $ppid;
    my $query = new Net::DNS::Packet(\$buf);
    my $conn = {
      sockhost => $sock->sockhost,
      sockport => $sock->sockport,
      peerhost => $sock->peerhost,
      peerport => $sock->peerport
    };
    my $reply = make_reply($query, $sock->peerhost, $conn) or return;
    $sock->send($reply->data($MAXLEN));
  } 
  exit;
}

sub reply_handler {
  my ($qname, $qclass, $qtype, $peerhost, $query, $conn) = @_;

  print "Received query from $peerhost to ". $conn->{sockhost}. "\n";
  #$query->print;

  my $ip = -e "/tmp/$qname" ? slurp "/tmp/$qname" : '127.0.0.2';
  return ('NOERROR', [new Net::DNS::RR(join ' ', $qname, '3600', $qclass, $qtype, $ip)], [], [], { aa => 1 });
}

sub make_reply {
	my ( $query, $peerhost, $conn ) = @_;

	unless ($query) {
#		print "ERROR: invalid packet\n" if $self->{Verbose};
		my $empty = new Net::DNS::Packet();		# create empty reply packet
		my $reply = $empty->reply();
		$reply->header->rcode("FORMERR");
		return $reply;
	}

	if ( $query->header->qr() ) {
#		print "ERROR: invalid packet (qr set), dropping\n" if $self->{Verbose};
		return;
	}

	my $reply  = $query->reply();
	my $header = $reply->header;
	my $headermask;

	my $opcode  = $query->header->opcode;
	my $qdcount = $query->header->qdcount;

	unless ($qdcount) {
		$header->rcode("NOERROR");

	} elsif ( $qdcount > 1 ) {
#		print "ERROR: qdcount $qdcount unsupported\n" if $self->{Verbose};
		$header->rcode("FORMERR");

	} else {
		my ($qr)   = $query->question;
		my $qname  = $qr->qname;
		my $qtype  = $qr->qtype;
		my $qclass = $qr->qclass;

		my $id = $query->header->id;
#		print "query $id : $qname $qclass $qtype - " if $self->{Verbose};

		my ( $rcode, $ans, $auth, $add );
		my @arglist = ( $qname, $qclass, $qtype, $peerhost, $query, $conn );

		if ( $opcode eq "QUERY" ) {
			( $rcode, $ans, $auth, $add, $headermask ) = reply_handler(@arglist);

		} else {
#			print "ERROR: opcode $opcode unsupported\n" if $self->{Verbose};
			$rcode = "FORMERR";
		}

		if ( !defined($rcode) ) {
#			print "remaining silent\n" if $self->{Verbose};
			return undef;
		}
#		print "$rcode\n" if $self->{Verbose};

		$header->rcode($rcode);

		$reply->{answer}     = [@$ans]	if $ans;
		$reply->{authority}  = [@$auth] if $auth;
		$reply->{additional} = [@$add]	if $add;
	}

	if ( !defined($headermask) ) {
		$header->ra(1);
		$header->ad(0);
	} else {
		$header->opcode( $headermask->{opcode} ) if $headermask->{opcode};

		$header->aa(1) if $headermask->{aa};
		$header->ra(1) if $headermask->{ra};
		$header->ad(1) if $headermask->{ad};
	}

#	$header->print if $self->{Verbose} && defined $headermask;

	return $reply;
}

Mojo::IOLoop->server({port => 25} => sub {
  my ($loop, $stream) = @_;

  $stream->on(read => sub {
    my ($stream, $bytes) = @_;

    # Process input chunk
    say $bytes;
    say $stream->handle->peerhost;
    push @{$db->{$stream->handle->peerhost}}, $bytes;
    if ( $awl ) {
      $w->{$stream->handle->peerhost} = 1;
    } else {
      $stream->close and return unless $w->{$stream->handle->peerhost};
    }
    $stream->write("250 Goodbye\n") and $stream->close if $bytes =~ /^QUIT/i;

    # Write response
    $stream->write("250 OK\n");
  });
});

my $fc = Mojo::IOLoop::ForkCall->new;
$fc->on(spawn => sub {
  my ($fc, $child_pid) = @_;
  push @children, $child_pid;
});

get '/' => sub {
  my $c = shift;
  $c->render(json => $db);
};
get '/auto-wl' => sub {
  my $c = shift;
  $awl = !$awl;
  $c->render(text => $awl ? 'yes' : 'no');
};
get '/smtp/#ip/:x' => sub {
  my $c = shift;
  my $x = $c->param('x') ? 'yes' : 'no';
  $w->{$c->param('ip')} = 1;
  $c->render(text => "Whitelist: $x");
};
get '/dns/#domain' => {domain => ''} => sub {
  my $c = shift;
  $c->session('domains.'.$c->param('domain') => $c->tx->remote_address) if $c->param('domain');
  spurt $c->tx->remote_address, "/tmp/$_" for map { s/^domains\.//; $_ } grep { /^domains\./ } keys %{$c->session};
  $c->render(json => $c->session);
};

$fc->run(\&dns, [$$]);
app->secrets([$$ x 10])->start;
eval { say "Killing $_"; CORE::kill KILL => $_ } while shift @children;
